# god_level_bot.py
import base64, zlib, binascii, marshal, dis, gzip, bz2, urllib.parse, codecs, io, ast, os, logging, re
from contextlib import redirect_stdout
try:
    from uncompyle6 import decompile
    UNCOMPYLE6_AVAILABLE = True
except ImportError:
    UNCOMPYLE6_AVAILABLE = False
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# --- Threat Analysis Module ---
THREAT_PATTERNS = {
    "HIGHLY_DANGEROUS": [
        r"os\.system", r"subprocess\.", r"os\.remove", r"os\.unlink", r"shutil\.rmtree",
        r"requests\.post", r"socket\.send", r"urllib\.request\.urlopen", r"ctypes\."
    ],
    "SUSPICIOUS": [
        r"eval", r"exec", r"open\s*\(.*['\"]w['\"].*\)", r"open\s*\(.*['\"]a['\"].*\)", # Writing or appending to files
        r"socket", r"requests\.get", r"os\.listdir", r"os\.walk", r"sys\.exit"
    ],
    "INFO": [
        r"__import__", r"getattr", r"setattr", r"globals", r"locals"
    ]
}

def analyze_threats(code):
    threats = {"HIGHLY_DANGEROUS": [], "SUSPICIOUS": [], "INFO": []}
    total_threat_score = 0
    for level, patterns in THREAT_PATTERNS.items():
        for pattern in patterns:
            found = re.findall(pattern, code)
            if found:
                threats[level].extend(found)
                if level == "HIGHLY_DANGEROUS": total_threat_score += 10 * len(found)
                elif level == "SUSPICIOUS": total_threat_score += 3 * len(found)
                else: total_threat_score += 1 * len(found)
    
    if total_threat_score > 15:
        level_str = "üö®üö®üö® ‡¶Ö‡¶§‡ßç‡¶Ø‡¶®‡ßç‡¶§ ‡¶¨‡¶ø‡¶™‡¶ú‡ßç‡¶ú‡¶®‡¶ï (Highly Dangerous)"
    elif total_threat_score > 5:
        level_str = "‚ö†Ô∏è ‡¶∏‡¶®‡ßç‡¶¶‡ßá‡¶π‡¶ú‡¶®‡¶ï (Suspicious)"
    elif total_threat_score > 0:
        level_str = "üõ°Ô∏è ‡¶§‡¶•‡ßç‡¶Ø‡¶Æ‡ßÇ‡¶≤‡¶ï (Informational)"
    else:
        level_str = "‚úÖ ‡¶®‡¶ø‡¶∞‡¶æ‡¶™‡¶¶ ‡¶Æ‡¶®‡ßá ‡¶π‡¶ö‡ßç‡¶õ‡ßá (Seems Safe)"

    report = f"**‡¶¨‡¶ø‡¶™‡¶¶‡¶Æ‡¶æ‡¶§‡ßç‡¶∞‡¶æ:** {level_str}\n"
    for level, found_items in threats.items():
        if found_items:
            report += f"\n- **{level}:** `{', '.join(set(found_items))}`"
    return report

# --- AST Deobfuscation Module ---
class AdvancedASTSimplifier(ast.NodeTransformer):
    def visit_BinOp(self, node):
        if isinstance(node.op, ast.Add) and isinstance(node.left, ast.Constant) and isinstance(node.right, ast.Constant):
            if isinstance(node.left.value, str) and isinstance(node.right.value, str):
                return ast.Constant(value=node.left.value + node.right.value)
        self.generic_visit(node)
        return node

    def visit_List(self, node):
        # Simplifies [chr(104), chr(101)] -> "he" (if it's part of a join)
        # This part is complex, for now we keep it simple. A more advanced version would track variable assignments.
        is_all_chr_calls = True
        char_codes = []
        for elt in node.elts:
            if isinstance(elt, ast.Call) and isinstance(elt.func, ast.Name) and elt.func.id == 'chr' and isinstance(elt.args[0], ast.Constant):
                char_codes.append(elt.args[0].value)
            else:
                is_all_chr_calls = False
                break
        if is_all_chr_calls:
            try:
                return ast.Constant(value=''.join(map(chr, char_codes)))
            except:
                pass
        return node
        
def simplify_source_code(source_code):
    try:
        tree = ast.parse(source_code)
        simplifier = AdvancedASTSimplifier()
        simplified_tree = simplifier.visit(tree)
        return ast.unparse(simplified_tree)
    except Exception:
        return source_code

# --- Decompilation & Decoding Engine ---
def decompile_marshal(data_bytes):
    if UNCOMPYLE6_AVAILABLE:
        try:
            out = io.StringIO()
            decompile(3.9, data_bytes, out) # Python 3.9
            source_code = out.getvalue()
            if source_code and not source_code.startswith("# uncompyle6 error"):
                 return source_code.encode('utf-8'), "Marshal (Decompiled)"
        except Exception:
            pass
    # Fallback to disassembly
    try:
        code_obj = marshal.loads(data_bytes)
        s = io.StringIO()
        with redirect_stdout(s): dis.dis(code_obj)
        return s.getvalue().encode('utf-8'), "Marshal (Disassembled)"
    except Exception: return None

DECODERS = [
    (lambda d: (base64.b64decode(d), "Base64")), (lambda d: (zlib.decompress(d), "Zlib")),
    decompile_marshal, (lambda d: (gzip.decompress(d), "Gzip")),
    (lambda d: (binascii.unhexlify(d), "Hex")), (lambda d: (base64.b32decode(d), "Base32")),
    (lambda d: (bz2.decompress(d), "Bz2")), (lambda d: (codecs.decode(d, 'rot_13').encode('utf-8'), "ROT13"))
]

def god_level_decode(initial_data: str) -> str:
    try:
        current_data = ast.literal_eval(initial_data)
    except Exception:
        current_data = initial_data

    if isinstance(current_data, str):
        current_data = current_data.encode('utf-8', errors='ignore')

    decoding_steps, max_iterations = [], 30
    for i in range(max_iterations):
        decoded_in_this_iteration = False
        for decoder_func in DECODERS:
            try:
                result = decoder_func(current_data)
                if result:
                    new_data, method_name = result
                    decoding_steps.append(f"‚úÖ ‡¶ß‡¶æ‡¶™ {len(decoding_steps) + 1}: `{method_name}` ‡¶∏‡¶´‡¶≤ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")
                    current_data, decoded_in_this_iteration = new_data, True
                    break
            except Exception: continue
        if not decoded_in_this_iteration: break

    if not decoding_steps:
        return "‚ùå ‡¶ö‡ßÇ‡¶°‡¶º‡¶æ‡¶®‡ßç‡¶§ ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•‡¶§‡¶æ‡•§ ‡¶è‡¶á ‡¶ï‡ßã‡¶°‡¶ü‡¶ø ‡¶™‡¶∞‡¶ø‡¶ö‡¶ø‡¶§ ‡¶ï‡ßã‡¶®‡ßã ‡¶™‡¶¶‡ßç‡¶ß‡¶§‡¶ø‡¶§‡ßá ‡¶°‡¶ø‡¶ï‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶∏‡¶Æ‡ßç‡¶≠‡¶¨ ‡¶π‡ßü‡¶®‡¶ø‡•§ ‡¶è‡¶ü‡¶ø ‡¶∏‡¶Æ‡ßç‡¶≠‡¶¨‡¶§ ‡¶ï‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ ‡¶è‡¶®‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡¶∂‡¶® ‡¶¨‡¶æ ‡¶è‡¶ï‡¶ü‡¶ø ‡¶¨‡¶æ‡¶£‡¶ø‡¶ú‡ßç‡¶Ø‡¶ø‡¶ï ‡¶™‡ßç‡¶∞‡ßã‡¶ü‡ßá‡¶ï‡ßç‡¶ü‡¶∞ (‡¶Ø‡ßá‡¶Æ‡¶® PyArmor) ‡¶¶‡ßç‡¶¨‡¶æ‡¶∞‡¶æ ‡¶∏‡ßÅ‡¶∞‡¶ï‡ßç‡¶∑‡¶ø‡¶§‡•§"
    
    report = "üî¨ **‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü:**\n" + "\n".join(decoding_steps)
    final_code_str = current_data.decode('utf-8', errors='ignore')

    simplified_code = simplify_source_code(final_code_str)
    if simplified_code != final_code_str:
        report += f"\n‚úÖ ‡¶ß‡¶æ‡¶™ {len(decoding_steps)+1}: `AST Simplification` ‡¶∏‡¶´‡¶≤ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§"
        final_code_str = simplified_code
    
    report += "\n\n" + ("-"*20) + "\n\n"
    report += "üö® **‡¶•‡ßç‡¶∞‡ßá‡¶ü ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶®‡¶æ‡¶≤‡¶æ‡¶á‡¶∏‡¶ø‡¶∏:**\n" + analyze_threats(final_code_str)
    report += "\n\n" + ("-"*20) + "\n\n"
    report += f"**‚ú® ‡¶ö‡ßÇ‡ßú‡¶æ‡¶®‡ßç‡¶§ ‡¶°‡¶ø‡¶ï‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶ï‡ßã‡¶°:**\n```python\n{final_code_str}\n```"
    return report

# --- Telegram Bot Handlers ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_html(
        f"‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ!\n\n‡¶è‡¶ü‡¶ø **God-Level Deobfuscator & Threat Analyzer**‡•§ ‡¶Ü‡¶Æ‡¶æ‡¶ï‡ßá ‡¶Ø‡ßá‡¶ï‡ßã‡¶®‡ßã ‡¶ú‡¶ü‡¶ø‡¶≤ ‡¶™‡¶æ‡¶á‡¶•‡¶® ‡¶ï‡ßã‡¶° ‡¶¶‡¶ø‡¶®, ‡¶Ü‡¶Æ‡¶ø ‡¶∏‡ßá‡¶ü‡¶ø‡¶∞ ‡¶∞‡¶π‡¶∏‡ßç‡¶Ø ‡¶≠‡ßá‡¶¶ ‡¶ï‡¶∞‡ßá ‡¶§‡¶æ‡¶∞ ‡¶≠‡ßá‡¶§‡¶∞‡ßá‡¶∞ ‡¶â‡¶¶‡ßç‡¶¶‡ßá‡¶∂‡ßç‡¶Ø ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ ‡¶ï‡¶∞‡ßá ‡¶¶‡ßá‡¶¨‡ßã‡•§"
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_code = update.message.text
    if len(user_code) > 15000:
        await update.message.reply_text("‚ùå ‡¶á‡¶®‡¶™‡ßÅ‡¶ü‡¶ü‡¶ø ‡¶ñ‡ßÅ‡¶¨ ‡¶¶‡ßÄ‡¶∞‡ßç‡¶ò‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶õ‡ßã‡¶ü ‡¶ï‡ßã‡¶° ‡¶¶‡¶ø‡¶®‡•§")
        return
        
    await update.message.reply_text("‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ï‡ßã‡¶° ‡¶ó‡¶≠‡ßÄ‡¶∞‡¶≠‡¶æ‡¶¨‡ßá ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá... ‡¶è‡¶ü‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶ú‡¶ü‡¶ø‡¶≤ ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡ßü‡¶æ, ‡¶ï‡¶ø‡¶õ‡ßÅ‡¶ï‡ßç‡¶∑‡¶£ ‡¶∏‡¶Æ‡ßü ‡¶≤‡¶æ‡¶ó‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡•§")
    decoded_result = god_level_decode(user_code)
    
    if len(decoded_result) > 4096:
        for i in range(0, len(decoded_result), 4000):
             await update.message.reply_markdown(decoded_result[i:i+4000])
    else:
        await update.message.reply_markdown(decoded_result)

def main():
    if not TELEGRAM_TOKEN:
        print("‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: TELEGRAM_TOKEN ‡¶è‡¶®‡¶≠‡¶æ‡¶Ø‡¶º‡¶∞‡¶®‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶≠‡ßá‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶¨‡¶≤ ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡¶®‡¶ø‡•§")
        return

    application = Application.builder().token(TELEGRAM_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    print("God-Level ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶®‡¶æ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü ‡¶¨‡¶ü ‡¶ö‡¶≤‡¶õ‡ßá...")
    application.run_polling()

if __name__ == '__main__':
    main()
